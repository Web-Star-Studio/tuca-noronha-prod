// Script de teste para verificar integra√ß√£o OpenAI
// Execute com: node scripts/test-openai.js

require('dotenv').config({ path: '.env.local' });

const testOpenAIIntegration = async () => {
  console.log('üß™ Testando Integra√ß√£o OpenAI...\n');

  // 1. Verificar vari√°vel de ambiente
  const apiKey = process.env.OPENAI_API_KEY;
  
  if (!apiKey) {
    console.log('‚ùå OPENAI_API_KEY n√£o encontrada');
    console.log('üìù Configure a vari√°vel no arquivo .env.local');
    console.log('üí° O sistema funcionar√° com algoritmo tradicional apenas\n');
    return false;
  }

  if (!apiKey.startsWith('sk-')) {
    console.log('‚ùå OPENAI_API_KEY inv√°lida (deve come√ßar com sk-)');
    return false;
  }

  console.log('‚úÖ OPENAI_API_KEY configurada corretamente');
  console.log(`üîë Key: ${apiKey.substring(0, 10)}...${apiKey.slice(-5)}\n`);

  // 2. Testar conex√£o com OpenAI
  try {
    const OpenAI = require('openai');
    const openai = new OpenAI({ apiKey });

    console.log('üîÑ Testando conex√£o com OpenAI...');
    
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'user',
          content: 'Responda apenas "Conex√£o funcionando!" para testar a API.'
        }
      ],
      max_tokens: 50,
      temperature: 0
    });

    const reply = response.choices[0].message.content;
    console.log(`‚úÖ Resposta da OpenAI: "${reply}"`);
    console.log('üéâ Integra√ß√£o funcionando perfeitamente!\n');
    
    return true;
  } catch (error) {
    console.log('‚ùå Erro ao conectar com OpenAI:');
    console.log(`   ${error.message}`);
    
    if (error.message.includes('API key')) {
      console.log('üí° Verifique se a API key est√° correta');
    } else if (error.message.includes('billing')) {
      console.log('üí° Verifique se voc√™ tem cr√©ditos na conta OpenAI');
    } else if (error.message.includes('rate_limit')) {
      console.log('üí° Rate limit atingido, tente novamente em alguns minutos');
    }
    
    console.log('üîÑ O sistema far√° fallback para algoritmo tradicional\n');
    return false;
  }
};

// 3. Testar perfil de usu√°rio exemplo
const testUserProfile = () => {
  console.log('üë§ Testando perfil de usu√°rio exemplo:');
  
  const userProfile = {
    tripDuration: '3-4 dias',
    companions: 'casal',
    interests: ['mergulho', 'fotografia', 'vida_marinha'],
    budget: 8000,
    personalityProfile: {
      adventureLevel: 75,
      luxuryPreference: 60,
      socialLevel: 45,
      activityIntensity: 80
    },
    moodTags: ['adventure', 'romantic', 'discovery'],
    experienceGoals: ['mergulhar_com_golfinhos', 'ver_por_do_sol', 'fotografar_paisagens']
  };

  console.log('   üìä Perfil:', JSON.stringify(userProfile, null, 2));
  console.log('   ‚úÖ Perfil v√°lido para processamento IA\n');
  
  return userProfile;
};

// 4. Executar testes
const runTests = async () => {
  console.log('üöÄ Iniciando testes de integra√ß√£o OpenAI\n');
  
  const openaiWorking = await testOpenAIIntegration();
  const userProfile = testUserProfile();
  
  console.log('üìä RESULTADO DOS TESTES:');
  console.log('=======================');
  console.log(`OpenAI API: ${openaiWorking ? '‚úÖ Funcionando' : '‚ùå Com problemas'}`);
  console.log(`Perfil de Usu√°rio: ‚úÖ V√°lido`);
  console.log(`Sistema H√≠brido: ‚úÖ Implementado`);
  console.log(`Fallback: ‚úÖ Dispon√≠vel`);
  
  if (openaiWorking) {
    console.log('\nüéâ SISTEMA PRONTO PARA PRODU√á√ÉO!');
    console.log('   ‚Ä¢ Recomenda√ß√µes IA: Ativas');
    console.log('   ‚Ä¢ Insights avan√ßados: Dispon√≠veis');
    console.log('   ‚Ä¢ Performance otimizada: ‚úÖ');
  } else {
    console.log('\n‚ö†Ô∏è  SISTEMA EM MODO FALLBACK');
    console.log('   ‚Ä¢ Recomenda√ß√µes algoritmo: Ativas');
    console.log('   ‚Ä¢ Performance garantida: ‚úÖ');
    console.log('   ‚Ä¢ Configure OpenAI para IA completa');
  }
  
  console.log('\nüîß Para configurar OpenAI:');
  console.log('   1. Crie conta em platform.openai.com');
  console.log('   2. Gere uma API key');
  console.log('   3. Adicione OPENAI_API_KEY=sk-... no .env.local');
  console.log('   4. Reinicie o servidor de desenvolvimento');
};

// Executar se chamado diretamente
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = { testOpenAIIntegration, testUserProfile }; 